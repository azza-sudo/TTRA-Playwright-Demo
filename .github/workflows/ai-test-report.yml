name: AI Test Report Integration (Demo)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  e2e:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.56.1-noble
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci

      - name: List discovered tests (sanity)
        run: npx playwright test --list || true

      - name: Run Playwright Tests (HTML + JSON + LOG)
        shell: bash
        run: |
          set -euxo pipefail
          REPORT_DIR="${{ github.workspace }}/playwright-report"
          JSON="${REPORT_DIR}/sample_results.json"
          RUNLOG="${{ runner.temp }}/playwright-run.log"

          mkdir -p "${REPORT_DIR}" "$(dirname "${RUNLOG}")"

          echo "Playwright CLI: $(npx playwright --version || true)"
          echo "Node: $(node -v)"; echo "npm: $(npm -v)"

          # Prefer a config that sets json reporter with outputFile pointing to ${JSON}.
          # If not present, we still capture a human-readable log for fallback parsing.
          npx playwright test --reporter=json,html 2>&1 | tee "${RUNLOG}"

          # If the config wrote JSON to stdout (common), try to extract the JSON object
          # from the log into ${JSON}. If ${JSON} already exists (from config outputFile),
          # this step will be skipped.
          if [ ! -s "${JSON}" ]; then
            awk 'BEGIN{json=0}
                 /^\\{/ {json=1}
                 json==1 {print}
                ' "${RUNLOG}" > "${JSON}" || true
          fi

          # Validate JSON; if still missing or invalid, write a minimal summary JSON
          if ! [ -s "${JSON}" ] || ! node -e "JSON.parse(require('fs').readFileSync(process.argv[1],'utf8'))" "${JSON}" 2>/dev/null; then
            echo "⚠️ JSON report missing or invalid. Creating minimal summary JSON from console log."
            # Derive totals from the log (e.g., 'Running 15 tests', '11 passed', '4 failed')
            TOTAL=$(grep -Eo 'Running[[:space:]]+[0-9]+' "${RUNLOG}" | awk '{print $2}' | tail -n1 || echo "")
            PASSED=$(grep -Eo '[0-9]+[[:space:]]+passed' "${RUNLOG}" | awk '{print $1}' | tail -n1 || echo "0")
            FAILED=$(grep -Eo '[0-9]+[[:space:]]+failed' "${RUNLOG}" | awk '{print $1}' | tail -n1 || echo "0")
            if [ -z "${TOTAL}" ]; then TOTAL=$((PASSED + FAILED)); fi
            mkdir -p "${REPORT_DIR}"
            cat > "${JSON}" <<EOF
{
  "summary": { "total": ${TOTAL:-0}, "passed": ${PASSED:-0}, "failed": ${FAILED:-0} },
  "failures": []
}
EOF
          fi

          mkdir -p reports
          cp -f "${JSON}" reports/sample_results.json

      - name: Upload Playwright JSON (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sample_results
          path: reports/sample_results.json

      - name: Upload Playwright LOG (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-run-log
          path: ${{ runner.temp }}/playwright-run.log

      - name: Upload Playwright HTML (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: ${{ github.workspace }}/playwright-report

      - name: Commit JSON report to repo
        if: ${{ always() && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/heads/') }}
        working-directory: ${{ github.workspace }}
        run: |
          set -e
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          CURRENT_BRANCH="${GITHUB_REF#refs/heads/}"
          git checkout "$CURRENT_BRANCH"
          git fetch origin "$CURRENT_BRANCH"
          git merge --ff-only "origin/$CURRENT_BRANCH" || true
          git add reports/sample_results.json
          git commit -m "Add Playwright JSON report for $GITHUB_SHA" || echo "No changes to commit"
          git push origin "HEAD:$CURRENT_BRANCH" || echo "Nothing to push"

  ai-agent:
    needs: e2e
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout AI Agent Repository
        uses: actions/checkout@v4
        with:
          repository: azza-sudo/TestInsight-Agent
          path: testinsight

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: sample_results
          path: testinsight

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install AI Agent Dependencies
        working-directory: testinsight
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # Ensure requests + dotenv + openai are available for main.py
          pip install requests python-dotenv openai

      - name: Run AI Analysis
        working-directory: testinsight
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "Running TestInsight AI Agent..."
          # Provide the run log as a fallback parsing source if needed
          python main.py sample_results.json --runlog "${{ runner.temp }}/playwright-run.log"

      - name: Upload AI Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-report
          path: testinsight/ai_report.json
